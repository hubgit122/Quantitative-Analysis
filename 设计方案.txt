每个模拟器是独立的服务器. 客户端通过地址和端口指定要登录的服务器, 通过账号密码登录该服务器上的账号. 
服务器端存储所有用户数据, 客户端只是负责显示数据和交易历史并将用户的合法指令传递给服务器, 而除了为了性能而引进的缓存外不存储任何东西, 也就是说, 数据不一致时, 以服务器为准, 不需要双向同步. 
服务器上的数据接受质疑. 任何交易历史和承载指令的消息都要被存储, 以备查验. 

开始使用:
为了防止中间人攻击, 在使用客户端之前, 需要验证客户端压缩包的MD5, 防止有人改动客户端存储的根证书从而使用冒名的根证书签发的服务器证书来向客户端冒充合法的服务器, 也防止有人修改代码来破坏密钥验证模块. 

注册新账号:
1)可以选择用密码注册, 客户端将注册信息(用户名, 密码和一个临时随机数)用服务器公钥加密传给服务器. 这时服务器在数据库里存储{账户名}和{密码的hash(MD5)}, 并用私钥加密解密出来的临时随机数传回客户端. 
    登录过程: 在登录后, 开始通信之前, 客户端直接生成一个AES密钥作为会话密钥, 并用自己的私钥加密传回客户端(这里会被劫持). 
2)也可以通过证书注册而不指定密码, 双方通过长期密钥进行密钥交换过程, 使得持有该账户私钥的客户端可以完成密钥交换, 密钥交换成功的客户端直接登录. 
  连接到服务器时保存服务器的证书. 证书应该被可信CA签发. 这个CA是我. 客户端自动生成或加载已有的密钥和证书, 证书随注册信息一同发送给服务器, 服务器在keystore里开辟一个名为账号名的新条目来存储其证书. 这时引入账号名唯一的检测. 
  注册时, 服务器应该为客户端的证书签名, 形成CA->服务器->客户端的证书链, 可以在别的应用中认证客户端之间的通信方
  
密钥交换过程:
  